{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Geolocation from '@react-native-community/geolocation';\n\nfunction requestLocationPermission() {\n  var granted;\n  return _regeneratorRuntime.async(function requestLocationPermission$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {\n            'title': 'Location Access Required',\n            'message': 'This App needs to Access your location',\n            'buttonPositive': 'Grant'\n          }));\n\n        case 4:\n          granted = _context.sent;\n\n          if (!(granted === PermissionsAndroid.RESULTS.GRANTED)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 7:\n          return _context.abrupt(\"return\", false);\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          return _context.abrupt(\"return\", false);\n\n        case 13:\n          return _context.abrupt(\"return\", true);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n}\n\nexport function getCurrentLocation(callback) {\n  return _regeneratorRuntime.async(function getCurrentLocation$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(requestLocationPermission());\n\n        case 2:\n          if (!_context2.sent) {\n            _context2.next = 4;\n            break;\n          }\n\n          Geolocation.getCurrentPosition(function (position) {\n            callback.call(position, position.coords.latitude, position.coords.longitude);\n          }, function (error) {\n            return alert(error.message);\n          }, {\n            enableHighAccuracy: true,\n            timeout: 1000,\n            maximumAge: 1000\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/dev/TigerSpike/LandmarkRemark/src/app/services/location.ts"],"names":["Geolocation","requestLocationPermission","Platform","OS","PermissionsAndroid","request","PERMISSIONS","ACCESS_FINE_LOCATION","granted","RESULTS","GRANTED","getCurrentLocation","callback","getCurrentPosition","position","call","coords","latitude","longitude","error","alert","message","enableHighAccuracy","timeout","maximumAge"],"mappings":";;;AAEA,OAAOA,WAAP,MAAwB,qCAAxB;;AAEA,SAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACMC,QAAQ,CAACC,EAAT,KAAgB,SADtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAG4BC,kBAAkB,CAACC,OAAnB,CACpBD,kBAAkB,CAACE,WAAnB,CAA+BC,oBADX,EACiC;AACnD,qBAAS,0BAD0C;AAEnD,uBAAW,wCAFwC;AAGnD,8BAAkB;AAHiC,WADjC,CAH5B;;AAAA;AAGYC,UAAAA,OAHZ;;AAAA,gBAUUA,OAAO,KAAKJ,kBAAkB,CAACK,OAAnB,CAA2BC,OAVjD;AAAA;AAAA;AAAA;;AAAA,2CAWe,IAXf;;AAAA;AAAA,2CAaa,KAbb;;AAAA;AAAA;AAAA;AAAA,2CAea,KAfb;;AAAA;AAAA,2CAkBS,IAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,OAAO,SAAeC,kBAAf,CAAkCC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACKX,yBAAyB,EAD9B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEHD,UAAAA,WAAW,CAACa,kBAAZ,CAEE,UAACC,QAAD,EAAc;AACZF,YAAAA,QAAQ,CAACG,IAAT,CAAcD,QAAd,EAAwBA,QAAQ,CAACE,MAAT,CAAgBC,QAAxC,EAAkDH,QAAQ,CAACE,MAAT,CAAgBE,SAAlE;AACD,WAJH,EAKE,UAACC,KAAD;AAAA,mBAAWC,KAAK,CAACD,KAAK,CAACE,OAAP,CAAhB;AAAA,WALF,EAME;AAAEC,YAAAA,kBAAkB,EAAE,IAAtB;AAA4BC,YAAAA,OAAO,EAAE,IAArC;AAA2CC,YAAAA,UAAU,EAAE;AAAvD,WANF;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import React from 'react'\r\nimport { PermissionsAndroid, Platform } from 'react-native'\r\nimport Geolocation from '@react-native-community/geolocation'\r\n\r\nasync function requestLocationPermission(): Promise<boolean> {\r\n  if (Platform.OS === 'android') {\r\n    try {\r\n      const granted = await PermissionsAndroid.request(\r\n        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {\r\n          'title': 'Location Access Required',\r\n          'message': 'This App needs to Access your location',\r\n          'buttonPositive': 'Grant'\r\n        }\r\n      )\r\n      if (granted === PermissionsAndroid.RESULTS.GRANTED) {\r\n        return true\r\n      }\r\n      return false\r\n    } catch (err) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport async function getCurrentLocation(callback: (lat: number, lng: number) => void) {\r\n  if (await requestLocationPermission()) {\r\n    Geolocation.getCurrentPosition(\r\n      //Will give you the current location\r\n      (position) => {\r\n        callback.call(position, position.coords.latitude, position.coords.longitude)\r\n      },\r\n      (error) => alert(error.message),\r\n      { enableHighAccuracy: true, timeout: 1000, maximumAge: 1000 }\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}