{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\TigerSpike\\\\LandmarkRemark\\\\src\\\\app\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport MapView, { Marker } from 'react-native-maps';\nimport { getLandmarks, getUsers, addLandmark } from \"./services/api\";\nimport * as Location from 'expo-location';\nexport default function App() {\n  var defaultRegion = {\n    latitude: -37.807,\n    longitude: 144.991,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05\n  };\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      landmarks = _useState2[0],\n      setLandmarks = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      users = _useState4[0],\n      setUsers = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUserIndex = _useState6[0],\n      setCurrentUserIndex = _useState6[1];\n\n  var _useState7 = useState(defaultRegion),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentLocation = _useState8[0],\n      setCurrentLocation = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      comment = _useState10[0],\n      setComment = _useState10[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status === 'granted')) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 7:\n              location = _context.sent;\n              setCurrentLocation({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude,\n                latitudeDelta: currentLocation.latitudeDelta,\n                longitudeDelta: currentLocation.longitudeDelta\n              });\n\n            case 9:\n              _context.t0 = setLandmarks;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(getLandmarks());\n\n            case 12:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.t2 = setUsers;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(getUsers());\n\n            case 17:\n              _context.t3 = _context.sent;\n              (0, _context.t2)(_context.t3);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (landmarks.length === 0) {\n      fetchData();\n    }\n  }, []);\n\n  var getCurrentUsersName = function getCurrentUsersName() {\n    if (!users || currentUserIndex < 0 || currentUserIndex >= users.length) {\n      return '';\n    }\n\n    return users[currentUserIndex].fullname;\n  };\n\n  var changeUser = function changeUser() {\n    setCurrentUserIndex((currentUserIndex + 1) % users.length);\n  };\n\n  var addNewLandmark = function addNewLandmark() {\n    var landmark, newLandmark;\n    return _regeneratorRuntime.async(function addNewLandmark$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            landmark = {};\n            landmark.username = users[currentUserIndex].username;\n            landmark.latitude = currentLocation.latitude;\n            landmark.longitude = currentLocation.longitude;\n            landmark.comment = comment;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(addLandmark(landmark));\n\n          case 7:\n            newLandmark = _context2.sent;\n            console.log(newLandmark);\n            setLandmarks(landmarks.concat(newLandmark));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(MapView, {\n    style: styles.map,\n    region: currentLocation,\n    onRegionChangeComplete: function onRegionChangeComplete(region) {\n      return setCurrentLocation(region);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, landmarks.map(function (landmark) {\n    var _users$find;\n\n    return React.createElement(Marker, {\n      key: landmark.id,\n      coordinate: {\n        latitude: landmark.latitude,\n        longitude: landmark.longitude\n      },\n      title: (_users$find = users.find(function (u) {\n        return u.username === landmark.username;\n      })) == null ? void 0 : _users$find.fullname,\n      description: landmark.comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    });\n  })), React.createElement(Image, {\n    source: require(\"./images/crosshair.png\"),\n    style: styles.crosshair,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.toolbarLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Add note for \", getCurrentUsersName()), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return changeUser();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.changeUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \" [Change]\"))), React.createElement(View, {\n    style: styles.toolbarInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    style: styles.comment,\n    multiline: true,\n    numberOfLines: 1,\n    maxLength: 500,\n    placeholder: \"Comment\",\n    onChangeText: function onChangeText(text) {\n      return setComment(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return addNewLandmark();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.add,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Add\"))))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n    height: '100%'\n  },\n  crosshair: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25\n  },\n  toolbar: {\n    flex: 0,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    height: 110,\n    width: '100%'\n  },\n  toolbarLabel: {\n    flexDirection: 'row',\n    paddingBottom: 10,\n    justifyContent: 'flex-start'\n  },\n  toolbarInput: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  user: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  changeUser: {\n    fontSize: 16,\n    color: '#3366ff'\n  },\n  comment: {\n    borderColor: '#999999',\n    borderWidth: 1,\n    padding: 10,\n    flex: 1\n  },\n  add: {\n    textAlign: 'right',\n    fontSize: 16,\n    color: '#3366ff',\n    marginLeft: 10\n  }\n});","map":{"version":3,"sources":["C:/dev/TigerSpike/LandmarkRemark/src/app/App.tsx"],"names":["React","useState","useEffect","MapView","Marker","getLandmarks","getUsers","addLandmark","Location","App","defaultRegion","latitude","longitude","latitudeDelta","longitudeDelta","landmarks","setLandmarks","users","setUsers","currentUserIndex","setCurrentUserIndex","currentLocation","setCurrentLocation","comment","setComment","fetchData","requestPermissionsAsync","status","getCurrentPositionAsync","location","coords","length","getCurrentUsersName","fullname","changeUser","addNewLandmark","landmark","username","newLandmark","console","log","concat","styles","container","map","region","id","find","u","require","crosshair","toolbar","toolbarLabel","user","toolbarInput","text","add","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","position","top","left","marginLeft","marginTop","paddingHorizontal","flexDirection","paddingBottom","fontSize","fontWeight","color","borderColor","borderWidth","padding","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { StyleSheet, Text, View, Image, TouchableOpacity, TextInput } from 'react-native'\nimport MapView, { Marker, Region, LatLng } from 'react-native-maps'\nimport { getLandmarks, getUsers, addLandmark } from './services/api'\nimport { Landmark } from './models/Landmark'\nimport { User } from './models/User'\nimport * as Location from 'expo-location'\n\nexport default function App() {\n  // Set a default location for the map\n  const defaultRegion = {\n    latitude: -37.807,\n    longitude: 144.991,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05,\n  } as Region\n\n  // Initialse the state variables\n  const [landmarks, setLandmarks] = useState([] as Landmark[])\n  const [users, setUsers] = useState([] as User[])\n  const [currentUserIndex, setCurrentUserIndex] = useState(0)\n  const [currentLocation, setCurrentLocation] = useState(defaultRegion)\n  const [comment, setComment] = useState('')\n\n  // Retrieve the Landmarks and Users from the database on load\n  useEffect(() => {\n    var fetchData = async () => {\n      const { status } = await Location.requestPermissionsAsync();\n      if (status === 'granted') {\n        const location = await Location.getCurrentPositionAsync({});\n        setCurrentLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          latitudeDelta: currentLocation.latitudeDelta,\n          longitudeDelta: currentLocation.longitudeDelta,\n        } as Region)\n      }\n\n      setLandmarks(await getLandmarks())\n      setUsers(await getUsers())\n    }\n\n    if (landmarks.length === 0) {\n      fetchData()\n    }\n  }, []);\n\n  // Gets the current user's name\n  var getCurrentUsersName = () => {\n    if (!users || currentUserIndex < 0 || currentUserIndex >= users.length) {\n      return ''\n    }\n\n    return users[currentUserIndex].fullname\n  }\n\n  // Changes the user\n  var changeUser = () => {\n    setCurrentUserIndex((currentUserIndex + 1) % users.length)\n  }\n\n  // Adds a new landmark to the map and the database\n  var addNewLandmark = async () => {\n    // Build a new landmark object\n    var landmark = {} as Landmark\n    landmark.username = users[currentUserIndex].username\n    landmark.latitude = currentLocation.latitude\n    landmark.longitude = currentLocation.longitude\n    landmark.comment = comment\n\n    // Post the landmark to the server\n    var newLandmark = await addLandmark(landmark)\n    console.log(newLandmark)\n\n    // Add the landmark to the UI\n    setLandmarks(landmarks.concat(newLandmark))\n  }\n\n  return (\n    <>\n      <View style={styles.container}>\n        <MapView style={styles.map} region={currentLocation} onRegionChangeComplete={region => setCurrentLocation(region)}>\n          {landmarks.map((landmark) =>\n            <Marker\n              key={landmark.id}\n              coordinate={{ latitude: landmark.latitude, longitude: landmark.longitude }}\n              title={(users.find(u => u.username === landmark.username))?.fullname}\n              description={landmark.comment}\n            />\n          )}\n        </MapView>\n        <Image source={require('./images/crosshair.png')} style={styles.crosshair} />\n        <View style={styles.toolbar}>\n          <View style={styles.toolbarLabel}>\n            <Text style={styles.user}>Add note for {getCurrentUsersName()}</Text>\n            <TouchableOpacity onPress={() => changeUser()}>\n              <Text style={styles.changeUser}> [Change]</Text>\n            </TouchableOpacity>\n          </View>\n          <View style={styles.toolbarInput}>\n            <TextInput\n              style={styles.comment}\n              multiline\n              numberOfLines={1}\n              maxLength={500}\n              placeholder='Comment'\n              onChangeText={(text) => setComment(text)}\n            />\n            <TouchableOpacity onPress={() => addNewLandmark()}>\n              <Text style={styles.add}>Add</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n  },\n  crosshair: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n  },\n  toolbar: {\n    flex: 0,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    height: 110,\n    width: '100%',\n  },\n  toolbarLabel: {\n    flexDirection: 'row',\n    paddingBottom: 10,\n    justifyContent: 'flex-start',\n  },\n  toolbarInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  user: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  changeUser: {\n    fontSize: 16,\n    color: '#3366ff',\n  },\n  comment: {\n    borderColor: '#999999',\n    borderWidth: 1,\n    padding: 10,\n    flex: 1,\n  },\n  add: {\n    textAlign: 'right',\n    fontSize: 16,\n    color: '#3366ff',\n    marginLeft: 10,\n  }\n})\n"]},"metadata":{},"sourceType":"module"}