{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\TigerSpike\\\\LandmarkRemark\\\\src\\\\app\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport MapView, { Marker } from 'react-native-maps';\nimport { getLandmarks, getUsers, addLandmark } from \"./services/api\";\nimport * as Location from 'expo-location';\nexport default function App() {\n  var defaultRegion = {\n    latitude: -37.807,\n    longitude: 144.991,\n    latitudeDelta: 0.1,\n    longitudeDelta: 0.1\n  };\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      landmarks = _useState2[0],\n      setLandmarks = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      users = _useState4[0],\n      setUsers = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUserIndex = _useState6[0],\n      setCurrentUserIndex = _useState6[1];\n\n  var _useState7 = useState(defaultRegion),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentLocation = _useState8[0],\n      setCurrentLocation = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      comment = _useState10[0],\n      setComment = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      searchText = _useState12[0],\n      setSearchText = _useState12[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status === 'granted')) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 7:\n              location = _context.sent;\n              setCurrentLocation({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude,\n                latitudeDelta: currentLocation.latitudeDelta,\n                longitudeDelta: currentLocation.longitudeDelta\n              });\n\n            case 9:\n              _context.t0 = setLandmarks;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(getLandmarks());\n\n            case 12:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.t2 = setUsers;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(getUsers());\n\n            case 17:\n              _context.t3 = _context.sent;\n              (0, _context.t2)(_context.t3);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (landmarks.length === 0) {\n      fetchData();\n    }\n  }, []);\n\n  var containsText = function containsText(srcStr, text) {\n    return srcStr.toLowerCase().includes(text.toLowerCase());\n  };\n\n  var matchesSearchText = function matchesSearchText(landmarkIndex) {\n    var landmark = landmarks[landmarkIndex];\n    var fullname = getUsersFullName(landmarkIndex);\n    return containsText(landmark.comment, searchText) || containsText(landmark.username, searchText) || containsText(fullname, searchText);\n  };\n\n  var runSearch = function runSearch() {\n    var processedLandmarks = [];\n    landmarks.forEach(function (landmark, index) {\n      processedLandmarks.push({\n        id: landmark.id,\n        username: landmark.username,\n        latitude: landmark.latitude,\n        longitude: landmark.longitude,\n        comment: landmark.comment,\n        created: landmark.created,\n        matchesSearchText: matchesSearchText(index)\n      });\n    });\n    setLandmarks(processedLandmarks);\n  };\n\n  var getUsersFullName = function getUsersFullName(index) {\n    if (!users || currentUserIndex < 0 || currentUserIndex >= users.length) {\n      return '';\n    }\n\n    return users[currentUserIndex].fullname;\n  };\n\n  var changeUser = function changeUser() {\n    setCurrentUserIndex((currentUserIndex + 1) % users.length);\n  };\n\n  var addNewLandmark = function addNewLandmark() {\n    var landmark, newLandmark;\n    return _regeneratorRuntime.async(function addNewLandmark$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            landmark = {};\n            landmark.username = users[currentUserIndex].username;\n            landmark.latitude = currentLocation.latitude;\n            landmark.longitude = currentLocation.longitude;\n            landmark.comment = comment;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(addLandmark(landmark));\n\n          case 7:\n            newLandmark = _context2.sent;\n            console.log(newLandmark);\n            setLandmarks(landmarks.concat(newLandmark));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, React.createElement(MapView, {\n    style: styles.map,\n    region: currentLocation,\n    onRegionChangeComplete: function onRegionChangeComplete(region) {\n      return setCurrentLocation(region);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, landmarks.map(function (landmark, index) {\n    var _users$find;\n\n    return React.createElement(Marker, {\n      key: landmark.id,\n      coordinate: {\n        latitude: landmark.latitude,\n        longitude: landmark.longitude\n      },\n      title: (_users$find = users.find(function (u) {\n        return u.username === landmark.username;\n      })) == null ? void 0 : _users$find.fullname,\n      description: landmark.comment,\n      pinColor: landmark.matchesSearchText ? '#ff0000' : '#0000ff',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    });\n  })), React.createElement(Image, {\n    source: require(\"./images/crosshair.png\"),\n    style: styles.crosshair,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.toolbarLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Add note for \", getUsersFullName(currentUserIndex)), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return changeUser();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, \" [Change]\"))), React.createElement(View, {\n    style: styles.toolbarInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textbox,\n    multiline: true,\n    numberOfLines: 1,\n    maxLength: 500,\n    placeholder: \"Comment\",\n    onChangeText: function onChangeText(text) {\n      return setComment(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return addNewLandmark();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, \"Add\"))), React.createElement(View, {\n    style: styles.toolbarLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Highlight Landmarks\")), React.createElement(View, {\n    style: styles.toolbarInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textbox,\n    placeholder: \"Search by comment or username\",\n    onChangeText: function onChangeText(text) {\n      return setSearchText(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, \"Search\"))))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    flex: 1,\n    width: '100%'\n  },\n  crosshair: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -125\n  },\n  toolbar: {\n    flex: 0,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    height: 200,\n    width: '100%'\n  },\n  toolbarLabel: {\n    flexDirection: 'row',\n    paddingBottom: 10,\n    justifyContent: 'flex-start'\n  },\n  toolbarInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingBottom: 5\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  link: {\n    fontSize: 16,\n    color: '#3366ff'\n  },\n  textbox: {\n    borderRadius: 5,\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    padding: 10,\n    flex: 1\n  },\n  button: {\n    borderRadius: 5,\n    backgroundColor: '#3366ff',\n    textAlign: 'center',\n    fontSize: 13,\n    color: '#ffffff',\n    padding: 16,\n    marginLeft: 10,\n    width: 80\n  }\n});","map":{"version":3,"sources":["C:/dev/TigerSpike/LandmarkRemark/src/app/App.tsx"],"names":["React","useState","useEffect","MapView","Marker","getLandmarks","getUsers","addLandmark","Location","App","defaultRegion","latitude","longitude","latitudeDelta","longitudeDelta","landmarks","setLandmarks","users","setUsers","currentUserIndex","setCurrentUserIndex","currentLocation","setCurrentLocation","comment","setComment","searchText","setSearchText","fetchData","requestPermissionsAsync","status","getCurrentPositionAsync","location","coords","length","containsText","srcStr","text","toLowerCase","includes","matchesSearchText","landmarkIndex","landmark","fullname","getUsersFullName","username","runSearch","processedLandmarks","forEach","index","push","id","created","changeUser","addNewLandmark","newLandmark","console","log","concat","styles","container","map","region","find","u","require","crosshair","toolbar","toolbarLabel","label","link","toolbarInput","textbox","button","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","position","top","left","height","marginLeft","marginTop","paddingHorizontal","flexDirection","paddingBottom","fontSize","fontWeight","color","borderRadius","borderColor","borderWidth","padding","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;AAEA,OAAOC,OAAP,IAAkBC,MAAlB,QAAwC,mBAAxC;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,WAAjC;AAGA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,eAAe,SAASC,GAAT,GAAe;AAE5B,MAAMC,aAAa,GAAG;AACpBC,IAAAA,QAAQ,EAAE,CAAC,MADS;AAEpBC,IAAAA,SAAS,EAAE,OAFS;AAGpBC,IAAAA,aAAa,EAAE,GAHK;AAIpBC,IAAAA,cAAc,EAAE;AAJI,GAAtB;;AAF4B,kBAUMb,QAAQ,CAAC,EAAD,CAVd;AAAA;AAAA,MAUrBc,SAVqB;AAAA,MAUVC,YAVU;;AAAA,mBAWFf,QAAQ,CAAC,EAAD,CAXN;AAAA;AAAA,MAWrBgB,KAXqB;AAAA,MAWdC,QAXc;;AAAA,mBAYoBjB,QAAQ,CAAC,CAAD,CAZ5B;AAAA;AAAA,MAYrBkB,gBAZqB;AAAA,MAYHC,mBAZG;;AAAA,mBAakBnB,QAAQ,CAACS,aAAD,CAb1B;AAAA;AAAA,MAarBW,eAbqB;AAAA,MAaJC,kBAbI;;AAAA,mBAcErB,QAAQ,CAAC,EAAD,CAdV;AAAA;AAAA,MAcrBsB,OAdqB;AAAA,MAcZC,UAdY;;AAAA,oBAeQvB,QAAQ,CAAC,EAAD,CAfhB;AAAA;AAAA,MAerBwB,UAfqB;AAAA,MAeTC,aAfS;;AAkB5BxB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIyB,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACWnB,QAAQ,CAACoB,uBAAT,EADX;;AAAA;AAAA;AACNC,cAAAA,MADM,yBACNA,MADM;;AAAA,oBAEVA,MAAM,KAAK,SAFD;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAGWrB,QAAQ,CAACsB,uBAAT,CAAiC,EAAjC,CAHX;;AAAA;AAGNC,cAAAA,QAHM;AAIZT,cAAAA,kBAAkB,CAAC;AACjBX,gBAAAA,QAAQ,EAAEoB,QAAQ,CAACC,MAAT,CAAgBrB,QADT;AAEjBC,gBAAAA,SAAS,EAAEmB,QAAQ,CAACC,MAAT,CAAgBpB,SAFV;AAGjBC,gBAAAA,aAAa,EAAEQ,eAAe,CAACR,aAHd;AAIjBC,gBAAAA,cAAc,EAAEO,eAAe,CAACP;AAJf,eAAD,CAAlB;;AAJY;AAAA,4BAYdE,YAZc;AAAA;AAAA,+CAYKX,YAAY,EAZjB;;AAAA;AAAA;AAAA;AAAA,4BAada,QAbc;AAAA;AAAA,+CAaCZ,QAAQ,EAbT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAgBA,QAAIS,SAAS,CAACkB,MAAV,KAAqB,CAAzB,EAA4B;AAC1BN,MAAAA,SAAS;AACV;AACF,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,MAAIO,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAiBC,IAAjB,EAA2C;AAC5D,WAAOD,MAAM,CAACE,WAAP,GAAqBC,QAArB,CAA8BF,IAAI,CAACC,WAAL,EAA9B,CAAP;AACD,GAFD;;AAKA,MAAIE,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,aAAD,EAA2B;AACjD,QAAIC,QAAQ,GAAG1B,SAAS,CAACyB,aAAD,CAAxB;AACA,QAAIE,QAAQ,GAAGC,gBAAgB,CAACH,aAAD,CAA/B;AACA,WAAON,YAAY,CAACO,QAAQ,CAAClB,OAAV,EAAmBE,UAAnB,CAAZ,IAA8CS,YAAY,CAACO,QAAQ,CAACG,QAAV,EAAoBnB,UAApB,CAA1D,IAA6FS,YAAY,CAACQ,QAAD,EAAWjB,UAAX,CAAhH;AACD,GAJD;;AAMA,MAAIoB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,QAAIC,kBAAkB,GAAG,EAAzB;AAEA/B,IAAAA,SAAS,CAACgC,OAAV,CAAkB,UAACN,QAAD,EAAWO,KAAX,EAAqB;AACrCF,MAAAA,kBAAkB,CAACG,IAAnB,CAAwB;AACtBC,QAAAA,EAAE,EAAET,QAAQ,CAACS,EADS;AAEtBN,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAFG;AAGtBjC,QAAAA,QAAQ,EAAE8B,QAAQ,CAAC9B,QAHG;AAItBC,QAAAA,SAAS,EAAE6B,QAAQ,CAAC7B,SAJE;AAKtBW,QAAAA,OAAO,EAAEkB,QAAQ,CAAClB,OALI;AAMtB4B,QAAAA,OAAO,EAAEV,QAAQ,CAACU,OANI;AAOtBZ,QAAAA,iBAAiB,EAAEA,iBAAiB,CAACS,KAAD;AAPd,OAAxB;AASD,KAVD;AAYAhC,IAAAA,YAAY,CAAC8B,kBAAD,CAAZ;AACD,GAhBD;;AAmBA,MAAIH,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACK,KAAD,EAAmB;AACxC,QAAI,CAAC/B,KAAD,IAAUE,gBAAgB,GAAG,CAA7B,IAAkCA,gBAAgB,IAAIF,KAAK,CAACgB,MAAhE,EAAwE;AACtE,aAAO,EAAP;AACD;;AAED,WAAOhB,KAAK,CAACE,gBAAD,CAAL,CAAwBuB,QAA/B;AACD,GAND;;AASA,MAAIU,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBhC,IAAAA,mBAAmB,CAAC,CAACD,gBAAgB,GAAG,CAApB,IAAyBF,KAAK,CAACgB,MAAhC,CAAnB;AACD,GAFD;;AAKA,MAAIoB,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfZ,YAAAA,QAFe,GAEJ,EAFI;AAGnBA,YAAAA,QAAQ,CAACG,QAAT,GAAoB3B,KAAK,CAACE,gBAAD,CAAL,CAAwByB,QAA5C;AACAH,YAAAA,QAAQ,CAAC9B,QAAT,GAAoBU,eAAe,CAACV,QAApC;AACA8B,YAAAA,QAAQ,CAAC7B,SAAT,GAAqBS,eAAe,CAACT,SAArC;AACA6B,YAAAA,QAAQ,CAAClB,OAAT,GAAmBA,OAAnB;AANmB;AAAA,6CASKhB,WAAW,CAACkC,QAAD,CAThB;;AAAA;AASfa,YAAAA,WATe;AAUnBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAGAtC,YAAAA,YAAY,CAACD,SAAS,CAAC0C,MAAV,CAAiBH,WAAjB,CAAD,CAAZ;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAgBA,SACE,0CACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAED,MAAM,CAACE,GAAvB;AAA4B,IAAA,MAAM,EAAEvC,eAApC;AAAqD,IAAA,sBAAsB,EAAE,gCAAAwC,MAAM;AAAA,aAAIvC,kBAAkB,CAACuC,MAAD,CAAtB;AAAA,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG9C,SAAS,CAAC6C,GAAV,CAAc,UAACnB,QAAD,EAAWO,KAAX;AAAA;;AAAA,WACb,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEP,QAAQ,CAACS,EADhB;AAEE,MAAA,UAAU,EAAE;AAAEvC,QAAAA,QAAQ,EAAE8B,QAAQ,CAAC9B,QAArB;AAA+BC,QAAAA,SAAS,EAAE6B,QAAQ,CAAC7B;AAAnD,OAFd;AAGE,MAAA,KAAK,iBAAGK,KAAK,CAAC6C,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACnB,QAAF,KAAeH,QAAQ,CAACG,QAA5B;AAAA,OAAZ,CAAH,qBAAE,YAAqDF,QAH9D;AAIE,MAAA,WAAW,EAAED,QAAQ,CAAClB,OAJxB;AAKE,MAAA,QAAQ,EAAEkB,QAAQ,CAACF,iBAAT,GAA6B,SAA7B,GAAyC,SALrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CADH,CADF,EAYE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEyB,OAAO,0BAAtB;AAAkD,IAAA,KAAK,EAAEN,MAAM,CAACO,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACQ,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACS,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACU,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAyCzB,gBAAgB,CAACxB,gBAAD,CAAzD,CADF,EAEE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE;AAAA,aAAMiC,UAAU,EAAhB;AAAA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACW,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAFF,CADF,EAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACY,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEZ,MAAM,CAACa,OADhB;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,aAAa,EAAE,CAHjB;AAIE,IAAA,SAAS,EAAE,GAJb;AAKE,IAAA,WAAW,EAAC,SALd;AAME,IAAA,YAAY,EAAE,sBAACnC,IAAD;AAAA,aAAUZ,UAAU,CAACY,IAAD,CAApB;AAAA,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE;AAAA,aAAMiB,cAAc,EAApB;AAAA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACc,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CATF,CAPF,EAoBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACS,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACU,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CApBF,EAuBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,MAAM,CAACY,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEZ,MAAM,CAACa,OADhB;AAEE,IAAA,WAAW,EAAC,+BAFd;AAGE,IAAA,YAAY,EAAE,sBAACnC,IAAD;AAAA,aAAUV,aAAa,CAACU,IAAD,CAAvB;AAAA,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEsB,MAAM,CAACc,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CANF,CAvBF,CAbF,CADF,CADF;AAoDD;AAED,IAAMd,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BlB,EAAAA,GAAG,EAAE;AACHe,IAAAA,IAAI,EAAE,CADH;AAEHI,IAAAA,KAAK,EAAE;AAFJ,GAP0B;AAW/Bd,EAAAA,SAAS,EAAE;AACTe,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,GAAG,EAAE,KAFI;AAGTC,IAAAA,IAAI,EAAE,KAHG;AAITH,IAAAA,KAAK,EAAE,EAJE;AAKTI,IAAAA,MAAM,EAAE,EALC;AAMTC,IAAAA,UAAU,EAAE,CAAC,EANJ;AAOTC,IAAAA,SAAS,EAAE,CAAC;AAPH,GAXoB;AAoB/BnB,EAAAA,OAAO,EAAE;AACPS,IAAAA,IAAI,EAAE,CADC;AAEPG,IAAAA,cAAc,EAAE,QAFT;AAGPQ,IAAAA,iBAAiB,EAAE,EAHZ;AAIPH,IAAAA,MAAM,EAAE,GAJD;AAKPJ,IAAAA,KAAK,EAAE;AALA,GApBsB;AA2B/BZ,EAAAA,YAAY,EAAE;AACZoB,IAAAA,aAAa,EAAE,KADH;AAEZC,IAAAA,aAAa,EAAE,EAFH;AAGZV,IAAAA,cAAc,EAAE;AAHJ,GA3BiB;AAgC/BR,EAAAA,YAAY,EAAE;AACZiB,IAAAA,aAAa,EAAE,KADH;AAEZV,IAAAA,UAAU,EAAE,QAFA;AAGZW,IAAAA,aAAa,EAAE;AAHH,GAhCiB;AAqC/BpB,EAAAA,KAAK,EAAE;AACLqB,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE;AAFP,GArCwB;AAyC/BrB,EAAAA,IAAI,EAAE;AACJoB,IAAAA,QAAQ,EAAE,EADN;AAEJE,IAAAA,KAAK,EAAE;AAFH,GAzCyB;AA6C/BpB,EAAAA,OAAO,EAAE;AACPqB,IAAAA,YAAY,EAAE,CADP;AAEPC,IAAAA,WAAW,EAAE,SAFN;AAGPC,IAAAA,WAAW,EAAE,CAHN;AAIPC,IAAAA,OAAO,EAAE,EAJF;AAKPpB,IAAAA,IAAI,EAAE;AALC,GA7CsB;AAoD/BH,EAAAA,MAAM,EAAE;AACNoB,IAAAA,YAAY,EAAE,CADR;AAENhB,IAAAA,eAAe,EAAE,SAFX;AAGNoB,IAAAA,SAAS,EAAE,QAHL;AAINP,IAAAA,QAAQ,EAAE,EAJJ;AAKNE,IAAAA,KAAK,EAAE,SALD;AAMNI,IAAAA,OAAO,EAAE,EANH;AAONX,IAAAA,UAAU,EAAE,EAPN;AAQNL,IAAAA,KAAK,EAAE;AARD;AApDuB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { StyleSheet, Text, View, Image, TouchableOpacity, TextInput } from 'react-native'\nimport MapView, { Marker, Region } from 'react-native-maps'\nimport { getLandmarks, getUsers, addLandmark } from './services/api'\nimport { Landmark } from './models/Landmark'\nimport { User } from './models/User'\nimport * as Location from 'expo-location'\n\nexport default function App() {\n  // Set a default location for the map\n  const defaultRegion = {\n    latitude: -37.807,\n    longitude: 144.991,\n    latitudeDelta: 0.1,\n    longitudeDelta: 0.1,\n  } as Region\n\n  // Initialse the state variables\n  const [landmarks, setLandmarks] = useState([] as Landmark[])\n  const [users, setUsers] = useState([] as User[])\n  const [currentUserIndex, setCurrentUserIndex] = useState(0)\n  const [currentLocation, setCurrentLocation] = useState(defaultRegion)\n  const [comment, setComment] = useState('')\n  const [searchText, setSearchText] = useState('')\n\n  // Retrieve the Landmarks and Users from the database on load\n  useEffect(() => {\n    var fetchData = async () => {\n      const { status } = await Location.requestPermissionsAsync();\n      if (status === 'granted') {\n        const location = await Location.getCurrentPositionAsync({});\n        setCurrentLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          latitudeDelta: currentLocation.latitudeDelta,\n          longitudeDelta: currentLocation.longitudeDelta,\n        } as Region)\n      }\n\n      setLandmarks(await getLandmarks())\n      setUsers(await getUsers())\n    }\n\n    if (landmarks.length === 0) {\n      fetchData()\n    }\n  }, []);\n\n  var containsText = (srcStr: string, text: string): boolean => {\n    return srcStr.toLowerCase().includes(text.toLowerCase())\n  }\n\n  // Search landmarks\n  var matchesSearchText = (landmarkIndex: number) => {\n    var landmark = landmarks[landmarkIndex]\n    var fullname = getUsersFullName(landmarkIndex)\n    return containsText(landmark.comment, searchText) || containsText(landmark.username, searchText) || containsText(fullname, searchText)\n  }\n\n  var runSearch = () => {\n    var processedLandmarks = [] as Landmark[]\n    \n    landmarks.forEach((landmark, index) => {\n      processedLandmarks.push({\n        id: landmark.id,\n        username: landmark.username,\n        latitude: landmark.latitude,\n        longitude: landmark.longitude,\n        comment: landmark.comment,\n        created: landmark.created,\n        matchesSearchText: matchesSearchText(index)\n      })\n    })\n\n    setLandmarks(processedLandmarks)\n  }\n\n  // Gets the current user's full name\n  var getUsersFullName = (index: number) => {\n    if (!users || currentUserIndex < 0 || currentUserIndex >= users.length) {\n      return ''\n    }\n\n    return users[currentUserIndex].fullname\n  }\n\n  // Changes the user\n  var changeUser = () => {\n    setCurrentUserIndex((currentUserIndex + 1) % users.length)\n  }\n\n  // Adds a new landmark to the map and the database\n  var addNewLandmark = async () => {\n    // Build a new landmark object\n    var landmark = {} as Landmark\n    landmark.username = users[currentUserIndex].username\n    landmark.latitude = currentLocation.latitude\n    landmark.longitude = currentLocation.longitude\n    landmark.comment = comment\n\n    // Post the landmark to the server\n    var newLandmark = await addLandmark(landmark)\n    console.log(newLandmark)\n\n    // Add the landmark to the UI\n    setLandmarks(landmarks.concat(newLandmark))\n  }\n\n  return (\n    <>\n      <View style={styles.container}>\n        <MapView style={styles.map} region={currentLocation} onRegionChangeComplete={region => setCurrentLocation(region)}>\n          {landmarks.map((landmark, index) =>\n            <Marker\n              key={landmark.id}\n              coordinate={{ latitude: landmark.latitude, longitude: landmark.longitude }}\n              title={(users.find(u => u.username === landmark.username))?.fullname}\n              description={landmark.comment}\n              pinColor={landmark.matchesSearchText ? '#ff0000' : '#0000ff'}\n            />\n          )}\n        </MapView>\n        <Image source={require('./images/crosshair.png')} style={styles.crosshair} />\n        <View style={styles.toolbar}>\n          <View style={styles.toolbarLabel}>\n            <Text style={styles.label}>Add note for {getUsersFullName(currentUserIndex)}</Text>\n            <TouchableOpacity onPress={() => changeUser()}>\n              <Text style={styles.link}> [Change]</Text>\n            </TouchableOpacity>\n          </View>\n          <View style={styles.toolbarInput}>\n            <TextInput\n              style={styles.textbox}\n              multiline\n              numberOfLines={1}\n              maxLength={500}\n              placeholder='Comment'\n              onChangeText={(text) => setComment(text)}\n            />\n            <TouchableOpacity onPress={() => addNewLandmark()}>\n              <Text style={styles.button}>Add</Text>\n            </TouchableOpacity>\n          </View>\n          <View style={styles.toolbarLabel}>\n            <Text style={styles.label}>Highlight Landmarks</Text>\n          </View>\n          <View style={styles.toolbarInput}>\n            <TextInput\n              style={styles.textbox}\n              placeholder='Search by comment or username'\n              onChangeText={(text) => setSearchText(text)}\n            />\n            <TouchableOpacity>\n              <Text style={styles.button}>Search</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n  },\n  crosshair: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -125,\n  },\n  toolbar: {\n    flex: 0,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    height: 200,\n    width: '100%',\n  },\n  toolbarLabel: {\n    flexDirection: 'row',\n    paddingBottom: 10,\n    justifyContent: 'flex-start',\n  },\n  toolbarInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingBottom: 5,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  link: {\n    fontSize: 16,\n    color: '#3366ff',\n  },\n  textbox: {\n    borderRadius: 5,\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    padding: 10,\n    flex: 1,\n  },\n  button: {\n    borderRadius: 5,\n    backgroundColor: '#3366ff',\n    textAlign: 'center',\n    fontSize: 13,\n    color: '#ffffff',\n    padding: 16,\n    marginLeft: 10,\n    width: 80,\n  }\n})\n"]},"metadata":{},"sourceType":"module"}